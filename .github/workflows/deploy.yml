name: CI/CD Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

env:
  NODE_VERSION: 22.18.0

jobs:
  setup:
    name: üß© Setup, Validate & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore pnpm cache
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: deps-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: deps-

      # Restore Playwright browsers cache
      - name: Restore Playwright cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('pnpm-lock.yaml') }}

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Install Playwright browsers if not cached
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Type Check
        run: pnpm run type-check

      - name: Run Lint and Format
        run: pnpm run lint:fix

  tests:
    name: üß™ Unit + E2E Tests
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, e2e]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: deps-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: deps-

      - name: Restore Playwright cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Run Tests
        run: |
          if [ "${{ matrix.test-type }}" = "unit" ]; then
            pnpm run test:run
          else
            pnpm run test:e2e

  build:
    name: üèóÔ∏è Build App
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: deps-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: deps-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Production
        run: pnpm run build

      - name: Verify build folder
        run: ls -la .next

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next/

  deploy:
    name: üöÄ Deploy to Vercel
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: .next

      - name: List build contents
        run: ls -la .next

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: .
